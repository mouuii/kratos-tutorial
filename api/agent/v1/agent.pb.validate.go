// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: agent/v1/agent.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRequestMultiError, or nil if none found.
func (m *CreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateUserRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAge() <= 0 {
		err := CreateUserRequestValidationError{
			field:  "Age",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateUserRequestMultiError(errors)
	}

	return nil
}

// CreateUserRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRequestMultiError) AllErrors() []error { return m }

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on CreateUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserReplyMultiError, or nil if none found.
func (m *CreateUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateUserReplyMultiError(errors)
	}

	return nil
}

// CreateUserReplyMultiError is an error wrapping multiple validation errors
// returned by CreateUserReply.ValidateAll() if the designated constraints
// aren't met.
type CreateUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserReplyMultiError) AllErrors() []error { return m }

// CreateUserReplyValidationError is the validation error returned by
// CreateUserReply.Validate if the designated constraints aren't met.
type CreateUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserReplyValidationError) ErrorName() string { return "CreateUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserReplyValidationError{}

// Validate checks the field values on UpdateAgentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAgentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAgentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAgentRequestMultiError, or nil if none found.
func (m *UpdateAgentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAgentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAgentRequestMultiError(errors)
	}

	return nil
}

// UpdateAgentRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateAgentRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateAgentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAgentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAgentRequestMultiError) AllErrors() []error { return m }

// UpdateAgentRequestValidationError is the validation error returned by
// UpdateAgentRequest.Validate if the designated constraints aren't met.
type UpdateAgentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAgentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAgentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAgentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAgentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAgentRequestValidationError) ErrorName() string {
	return "UpdateAgentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAgentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAgentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAgentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAgentRequestValidationError{}

// Validate checks the field values on UpdateAgentReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateAgentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAgentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAgentReplyMultiError, or nil if none found.
func (m *UpdateAgentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAgentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAgentReplyMultiError(errors)
	}

	return nil
}

// UpdateAgentReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateAgentReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateAgentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAgentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAgentReplyMultiError) AllErrors() []error { return m }

// UpdateAgentReplyValidationError is the validation error returned by
// UpdateAgentReply.Validate if the designated constraints aren't met.
type UpdateAgentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAgentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAgentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAgentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAgentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAgentReplyValidationError) ErrorName() string { return "UpdateAgentReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateAgentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAgentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAgentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAgentReplyValidationError{}

// Validate checks the field values on DeleteAgentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAgentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAgentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAgentRequestMultiError, or nil if none found.
func (m *DeleteAgentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAgentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAgentRequestMultiError(errors)
	}

	return nil
}

// DeleteAgentRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteAgentRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteAgentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAgentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAgentRequestMultiError) AllErrors() []error { return m }

// DeleteAgentRequestValidationError is the validation error returned by
// DeleteAgentRequest.Validate if the designated constraints aren't met.
type DeleteAgentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAgentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAgentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAgentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAgentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAgentRequestValidationError) ErrorName() string {
	return "DeleteAgentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAgentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAgentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAgentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAgentRequestValidationError{}

// Validate checks the field values on DeleteAgentReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteAgentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAgentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAgentReplyMultiError, or nil if none found.
func (m *DeleteAgentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAgentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAgentReplyMultiError(errors)
	}

	return nil
}

// DeleteAgentReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteAgentReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteAgentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAgentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAgentReplyMultiError) AllErrors() []error { return m }

// DeleteAgentReplyValidationError is the validation error returned by
// DeleteAgentReply.Validate if the designated constraints aren't met.
type DeleteAgentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAgentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAgentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAgentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAgentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAgentReplyValidationError) ErrorName() string { return "DeleteAgentReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteAgentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAgentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAgentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAgentReplyValidationError{}

// Validate checks the field values on GetAgentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAgentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAgentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAgentRequestMultiError, or nil if none found.
func (m *GetAgentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAgentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAgentRequestMultiError(errors)
	}

	return nil
}

// GetAgentRequestMultiError is an error wrapping multiple validation errors
// returned by GetAgentRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAgentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAgentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAgentRequestMultiError) AllErrors() []error { return m }

// GetAgentRequestValidationError is the validation error returned by
// GetAgentRequest.Validate if the designated constraints aren't met.
type GetAgentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAgentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAgentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAgentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAgentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAgentRequestValidationError) ErrorName() string { return "GetAgentRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAgentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAgentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAgentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAgentRequestValidationError{}

// Validate checks the field values on GetAgentReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAgentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAgentReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAgentReplyMultiError, or
// nil if none found.
func (m *GetAgentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAgentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAgentReplyMultiError(errors)
	}

	return nil
}

// GetAgentReplyMultiError is an error wrapping multiple validation errors
// returned by GetAgentReply.ValidateAll() if the designated constraints
// aren't met.
type GetAgentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAgentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAgentReplyMultiError) AllErrors() []error { return m }

// GetAgentReplyValidationError is the validation error returned by
// GetAgentReply.Validate if the designated constraints aren't met.
type GetAgentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAgentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAgentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAgentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAgentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAgentReplyValidationError) ErrorName() string { return "GetAgentReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetAgentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAgentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAgentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAgentReplyValidationError{}

// Validate checks the field values on ListAgentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAgentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAgentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAgentRequestMultiError, or nil if none found.
func (m *ListAgentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAgentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAgentRequestMultiError(errors)
	}

	return nil
}

// ListAgentRequestMultiError is an error wrapping multiple validation errors
// returned by ListAgentRequest.ValidateAll() if the designated constraints
// aren't met.
type ListAgentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAgentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAgentRequestMultiError) AllErrors() []error { return m }

// ListAgentRequestValidationError is the validation error returned by
// ListAgentRequest.Validate if the designated constraints aren't met.
type ListAgentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAgentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAgentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAgentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAgentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAgentRequestValidationError) ErrorName() string { return "ListAgentRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListAgentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAgentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAgentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAgentRequestValidationError{}

// Validate checks the field values on ListAgentReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListAgentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAgentReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListAgentReplyMultiError,
// or nil if none found.
func (m *ListAgentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAgentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAgentReplyMultiError(errors)
	}

	return nil
}

// ListAgentReplyMultiError is an error wrapping multiple validation errors
// returned by ListAgentReply.ValidateAll() if the designated constraints
// aren't met.
type ListAgentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAgentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAgentReplyMultiError) AllErrors() []error { return m }

// ListAgentReplyValidationError is the validation error returned by
// ListAgentReply.Validate if the designated constraints aren't met.
type ListAgentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAgentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAgentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAgentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAgentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAgentReplyValidationError) ErrorName() string { return "ListAgentReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListAgentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAgentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAgentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAgentReplyValidationError{}
